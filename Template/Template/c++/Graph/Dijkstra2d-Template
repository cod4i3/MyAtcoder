struct edge {
  int to, cost;
  Edge(int t, int c) : to(t), cost(c) { }
};

int V;
vector<edge> G[MAX_V];
int d[MAX_V][MAX_V];

// 始点sから各頂点への最短距離
void dijkstra(int s) {
  // greater<P> を指定することで昇順（距離が小さい順)にする
  priority_queue<P, vector<P>, greater<P> > que;
  fill(d, d + V, INF);
  d[s][s] = 0;
  que.push(P(0, s));

  while (!que.empty()) {
    P p = que.top();
    que.pop();
    int v = p.second;
    if (d[s][v] < p.first) continue;

    for (int i = 0; i < G[v].size(); i++) {
      edge e = G[v][i];
      if (d[s][e.to] > d[s][v] + e.cost) {
        d[s][e.to] = d[s][v] + e.cost;
        que.push(P(d[s][e.to], e.to));
      }
    }
  }
}
