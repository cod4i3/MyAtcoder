// こっちを使うのが良い

// 最初: 各ノードの親と、そのコンストラクタ（初期値は全部-1)
// root: 根を返す。mergeで初期化され各ノードの根は自分自身となる。
// merge: 根を統一する。
// same:根が同じかどうか
// 根はサイズを保存しており、根以外は親のindexを持つ
//  vector以外のライブラリに拠らない構成にしてみたが、
// swap使いたいなら #include<utility> 忘れないように

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

struct UnionFind {
  
  vector<int> par;
  explicit UnionFind(int n) : par(n, -1) {}

 
  int root(int x) {
    if (par[x] < 0)
      return x;
    else
      return par[x] = root(par[x]);
  }

  bool same(int x, int y) { return root(x) == root(y); }

  bool merge(int x, int y) {
    x = root(x);
    y = root(y);
    if (x == y) return false;

    if (par[x] > par[y]) {
      int tmp = x;
      x = y;
      y = tmp;
    }

    par[x] += par[y];
    par[y] = x;
    return true;
  }

  int size(int x) { return -par[root(x)]; }
};





sizeは測れない、直訳
struct UnionFind {
  vector<int> par;    // par[i]:iの親の番号 (例) par[3] = 2 : 3の親が2
  vector<int> depth;  // depth[i]: iの深さ最初は全部-1とする

  UnionFind(int N) : par(N), depth(N, -1) {  //最初は全てが根であるとして初期化
    for (int i = 0; i < N; i++) par[i] = i;
  }

  int root(int x) {  // データxが属する木の根を再帰で得る：root(x) = {xの木の根}
    if (par[x] == x) return x;
    return par[x] = root(par[x]);
  }

  void unite(int x, int y) {  // xとyの木を併合
    int rx = root(x);         // xの根をrx
    int ry = root(y);         // yの根をry
    if (rx == ry) return;  // xとyの根が同じ(=同じ木にある)時はそのまま

    if (depth[x] < depth[y]) {
      par[x] = y;
    } else {
      par[y] = x;
      if (depth[x] == depth[y]) depth[x]++;
    }
  }

  bool same(int x, int y) {  // 2つのデータx, yが属する木が同じならtrueを返す
    int rx = root(x);
    int ry = root(y);
    return rx == ry;
  }
};