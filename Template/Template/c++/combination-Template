modintを用いたパターンは下に貼る

/// nCk mod p

nCkmodPの計算です
a! = (fac[a])
(a!)^(-1) = (finv[a])
COM = nCk mod P

#include <iostream>
using namespace std;

const int MAX = 510000;
const int mod = 1000000007;

long long fac[MAX], finv[MAX], inv[MAX];

// テーブルを作る前処理
void COMinit() {
    fac[0] = fac[1] = 1;
    finv[0] = finv[1] = 1;
    inv[1] = 1;
    for (int i = 2; i < MAX; i++){
        fac[i] = fac[i - 1] * i % mod;
        inv[i] = mod - inv[mod%i] * (mod / i) % mod;
        finv[i] = finv[i - 1] * inv[i] % mod;
    }
}

// 二項係数計算
long long COM(int n, int k){
    if (n < k) return 0;
    if (n < 0 || k < 0) return 0;
    return fac[n] * (finv[k] * finv[n - k] % mod) % mod;
}

// テーブルを作る前処理
void COMinit() {
  fac[0] = fac[1] = 1;
  finv[0] = finv[1] = 1;
  inv[1] = 1;
  for (int i = 2; i < MAX; i++) {
    fac[i] = fac[i - 1].x * i % mod;
    inv[i] = mod - inv[mod % i].x * (mod / i) % mod;
    finv[i] = finv[i - 1].x * inv[i].x % mod;
  }
}

// 二項係数計算
mint COM(int n, int k) {
  if (n < k) return 0;
  if (n < 0 || k < 0) return 0;
  return fac[n].x * (finv[k].x * finv[n - k].x % mod) % mod;
}


// modなしversion
const int MAX_C = 1100;
long double com[MAX_C][MAX_C];

void cominit() {
    for (int i = 0; i < MAX_C; ++i) for (int j = 0; j < MAX_C; ++j) com[i][j] = 0.0;
    com[0][0] = 1.0;
    for (int i = 1; i < MAX_C; ++i) {
        com[i][0] = 1.0;
        for (int j = 1; j < MAX_C; ++j) {
            com[i][j] = (com[i-1][j-1] + com[i-1][j]);
        }
    }
}

int main() {
    // 前処理
    COMinit();

    // 計算例
    cout << COM(100000, 50000) << endl;

    // 前処理
    cominit();

    // 計算例
    cout << com[n][r] << endl;
}
