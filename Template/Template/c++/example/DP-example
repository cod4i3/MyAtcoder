// 上から順に桁DP, 区間DP, 累積和DP
// いずれここ改築するかも
ABC-07-D
#include <iostream>
#include <string>
#include <vector>
using namespace std;
using ll = long long;

ll solve(string str) {
  vector<int> dig;
  for (auto s : str) dig.emplace_back(s - '0');
  int l = dig.size();

  // dp[i][smaller][flag]
  // i桁目まで、smallerは小さいかどうかのflag、4または9を含んでいるかどうかのflag
  // 0桁目は数字"X"を"0X"として考えたときの0
  vector<vector<vector<ll>>> dp(20, vector<vector<ll>>(2, vector<ll>(2, 0)));
  dp[0][0][0] = 1;

  for (int i = 0; i < l; i++) {
    for (int smaller = 0; smaller < 2; smaller++) {
      for (int flag = 0; flag < 2; flag++) {
        // smallerが成立するなら9まで、じゃないならその桁の数まで
        for (int x = 0; x <= (smaller ? 9 : dig[i]); x++) {
          dp[i + 1][smaller || x < dig[i]][flag || x == 4 || x == 9] +=
              dp[i][smaller][flag];
        }
      }
    }
  }

  return dp[l][0][1] + dp[l][1][1];
}

int main() {
  string A, B;
  cin >> A >> B;
  A = to_string(stoll(A) - 1);

  cout << solve(B) - solve(A) << endl;
  return 0;
}

// 区間DP
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;
using ll = long long;

int main() {
  int N;
  cin >> N;

  vector<ll> a(N, 0);
  for (int i = 0; i < N; i++) cin >> a[i];

  // dp[l][r] = l ~ r - 1（つまり区間[i, j)での X - Y
  vector<vector<ll>> dp(N + 1, vector<ll>(N + 1));

  for (int len = 1; len <= N; len++) {
    for (int l = 0; l + len <= N; l++) {
      // つまり len = r - l = 石の残り個数
      int r = l + len;

      // 奇数番
      if ((N - len) % 2 == 0) {
        // 左側を選んだ時、右側を選んだ時の X+Y の最大値
        dp[l][r] = max(dp[l + 1][r] + a[l], dp[l][r - 1] + a[r - 1]);
      } else {
        // 左側を選んだ時、右側を選んだ時の X-Y の最小値
        dp[l][r] = min(dp[l + 1][r] - a[l], dp[l][r - 1] - a[r - 1]);
      }
    }
  }

  cout << dp[0][N] << endl;
  return 0;
}


#define _GLIBCXX_DEBUG
#include <iostream>
#include <vector>
using namespace std;
using ll = long long;
const ll MOD = 1e9 + 7;

int main() {
  cin.tie(0);
  ios::sync_with_stdio(false);
  int N, K;
  cin >> N >> K;

  vector<int> a(N);
  for (int i = 0; i < N; i++) cin >> a[i];

  // dp[i][j] = i番目までの子供にj個の飴を配る場合の数
  vector<vector<ll>> dp(N + 10, vector<ll>(K + 10, 0));
  // cum[i] = その時点で 0 ~ i 個使う場合の数の累積和
  vector<ll> cum(K + 10, 0);
  /*
     普通にdpを行うと
     rep(i, N)rep(j, K + 1){
         rep(k, a[i] + 1){
             if(j - k >= 0){
                 dp[i + 1][j + 1] += dp[i][j - k];
                 dp[i + 1][j + 1] %= MOD;
             }
         }
     }

     これだと計算量が膨大すぎるので累積和を使う
  */

  for (int i = 0; i <= N; i++) dp[i][0] = 1;

  for (int i = 0; i < N; i++) {
    cum[0] = dp[i][0];
    // cum[j - 1] = dp[i - 1][0] + do[i - 1][1] + dp[i - 1][j - 2]
    // cum[j]     = dp[i - 1][0] + dp[i - 1][1] + … + dp[i - 1][j - 1]
    //            = cum[j - 1] + dp[i - 1][j - 1]
    for (int j = 1; j <= K + 1; j++) {
      cum[j] = (dp[i][j] + cum[j - 1]);
    }
    // k = 0 ~ j - a[i]
    // dp[i][j] = dp[i - 1][0] + dp[i - 1][1] + … + dp[i - 1][k]
    // 上の式より cum[j + 1] - cum[j] = dp[i][j]
    for (int j = 1; j <= K + 1; j++) {
      if (j - a[i] <= 0) {
        dp[i + 1][j] = cum[j] % MOD;
      } else {
        dp[i + 1][j] = (cum[j] - cum[j - a[i] - 1]) % MOD;
      }
    }
  }

  cout << dp[N][K] << endl;
  return 0;
}