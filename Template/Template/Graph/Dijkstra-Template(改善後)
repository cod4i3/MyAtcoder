// 計算量は O(|E|log|V|)
// firstが最短距離、 secondが頂点番号
using P = pair<int, int>;
struct edge{int to, cost; Edge(int t, int w) : to(t), weight(w) { }};

int V;
vector<edge> G[MAX_V];
int d[MAX_V];


// 始点sから各頂点への最短距離
void dijkstra(int s){
  // greater<P> を指定することで昇順（距離が小さい順)にする
  priority_queue<P, vector<P>, greater<P> > que;
  fill(d, d+V, INF);
  d[s] = 0;
  que.push(P(0,s));

  while(!que.empty()){
    P p = que.top();
    que.pop();
    int v = p.second;
    if(d[v] < p.first) continue;

    for(int i=0; i< G[v].size(); i++){
      edge e = G[v][i];
      if(d[e.to] > d[v] + e.cost){
        d[e.to] = d[v] + e.cost;
        que.push(P(d[e.to], e.to));
      }
    }
  }

}


// 最短路復元
int prev[MAX_V]; // 最短路の直前の頂点
int cost[MAX_V][MAX_V];
int d[MAX_V]
bool used[MAX_V];
int V;

// 始点sから各頂点への最短距離を求める
void dijkstra(int s){
  fill(d, d+V, INF);
  fill(used, used + V, false);
  fill(prev, prev + V, -1);
  d[s] = 0;

  while(true){
    int v = -1;
    for(int u=0; u < V; y++){
      if(!used[u] && ( v == -1 || d[u] < d[v])) v = u;
    }

    if(v == -1) break;
    used[v] = true;

    for(int u=0; u<V; u++){
      if(d[u] > d[v] + cpst[v][u]){
        d[u] = d[v] + cost[v][u];
        prev[u] = v;
      }
    }
  }
}

// 頂点tへの最短路
vector<int> get_path(int t){
  vector<int> path;
  for(; t!= -1; t = prev[t]) path.push_back(t); // tがsになるまでprev[t]を辿っていく
  //そのままだと t -> s の順番なので逆順にする
  reverse(path.begin(), path.end());
  return path;
}