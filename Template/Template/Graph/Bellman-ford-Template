using INF = 10000000
// O(|V|*|E|)
// fromからtoへのcost
struct edge{int from, to, cost};
edge es[MAX_E]; //辺

int d[MAX_V] //最短距離
int V,E; //頂点数、辺数

// s番目の頂点から各頂点への最短距離を求める
void shortest_path(int s){
  for(int i=0;i<V;i++) d[i] = INF;
  d[s] = 0;
  while(true){
    bool update = false;
    for(int i=0; i<E; i++){
      edge e = es[i];
      if (d[e.from] != INF && d[e.to] > d[e.from] + e.cost){
        d[e.to] = d[e.from] + e.cost;
        update = true;
      }
    }

    if(!update) break;
  }
}

// 負の経路の検出用

void find_negative_loop(int s){
  for(int i=0;i<V;i++){
    for(int j=0;j<E;j++){
      edge e = es[j];
      if(d[e.to] > d[e.from] + e.cost){
        d[e.to] = d[e.from] + e.cost;

        // n回目に更新があるなら負の経路が存在
        if(i == V - 1) return true;
      }
    }
  }
}