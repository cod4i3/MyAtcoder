#define _GLIBCXX_DEBUG
#define _LIBCPP_DEBUG 0
#define REP(i, n) for (int i = 0; i < (int)(n); i++)
#define REP2(i, s, n) for (int i = (s); i < (int)(n); i++)
#define REPR(i,n) for(int i=n;i>=0;i--)
#define all(x) (x).begin(),(x).end()
#define m0(x) memset(x,0,sizeof(x))
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }
typedef long long ll;



// 可能な限り2で割る
int f(int x) {
  int res = 0;
  while (x % 2 == 0) {
    x /= 2;
    res++;
  }
  return res;
}

int gcd(int a, int b){return b?gcd(b,a%b): a;}
int lcm(int a, int b){return a/gcd(a,b) * b}
int gcd_n(vector<int> &numbers){
  int GCD;
  GCD = numbers[0];
  for (int i = 1; i < numbers.size(); i++) {
    GCD = gcd(l, numbers[i]);
  }
  return GCD;
}

int lcm_n(vector<int> &numbers){
  int l;
  l = numbers[0];
  for (int i = 1; i < numbers.size(); i++) {
    l = lcm(l, numbers[i]);
  }
  return l;
}


ll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }
ll lcm(ll a, ll b) { return a / gcd(a, b) * b; }
ll gcd_n(vector<ll> &numbers){
  ll GCD;
  GCD = numbers[0];
  for (int i = 1; i < numbers.size(); i++) {
    GCD = gcd(GCD, numbers[i]);
  }
  return GCD;
}
ll lcm_n(vector<ll> &numbers) {
  ll l;
  l = numbers.at(0);
  for (int i = 1; i < numbers.size(); i++) {
    l = lcm(l, numbers[i]);
  }
  return l;
}
/* 
  これがlong longの範囲を超えることは十分にあるので
  if(l > hoge){cout << 0 << endl; return 0;}
  みたいな条件を途中に挟む
*/



ll binary(ll bin) {
  ll ans = 0;
  for (int i = 0; bin > 0; i++) {
    ans = ans + (bin % 2) * pow(10, i);
    bin = bin / 2;
  }
  return ans;
}

int ceil(int x){return (x+1)/2;}
int floor(int x){return (x-1)/2;}


ll RepeatSquaring(ll N, ll P, ll M) {
  if (P == 0) return 1;
  if (P % 2 == 0) {
    ll t = RepeatSquaring(N, P / 2, M);
    return t * t % M;
  }
  return N * RepeatSquaring(N, P - 1, M);
}


順に
デバッグ用
for文(0~N-1)
範囲for文(s~N-1)
逆for文
iteratorの最初から最後 例:lower_bound(all(x))
memset、配列の0パディング
例えば
chmax(a,b) == if(a<b) a=b;
chmax(a,b+c) == if(a>b+c) a=b+c;
long long (書かなくても分かるでしょ？)



x以下の奇数を求めるものは
例えば 1, 2, 3, 4, 5 の場合
1, 3, 5 が奇数
これは5を2で割ったものを切り上げれば良い、実装としては
(x+1)/2
となる。これは偶数ならx/2、奇数ならx/2+1を返す